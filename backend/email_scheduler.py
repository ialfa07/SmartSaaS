
import asyncio
import schedule
import time
from datetime import datetime
import threading
from email_service import email_service, send_daily_reminders, send_weekly_reports

class EmailScheduler:
    def __init__(self):
        self.running = False
        
    def start_scheduler(self):
        """DÃ©marre le planificateur d'emails"""
        self.running = True
        
        # Planifier les emails quotidiens Ã  10h
        schedule.every().day.at("10:00").do(self.run_daily_reminders)
        
        # Planifier les rapports hebdomadaires le lundi Ã  9h
        schedule.every().monday.at("09:00").do(self.run_weekly_reports)
        
        # DÃ©marrer le planificateur dans un thread sÃ©parÃ©
        scheduler_thread = threading.Thread(target=self._run_scheduler)
        scheduler_thread.daemon = True
        scheduler_thread.start()
        
        print("ğŸ“§ Planificateur d'emails dÃ©marrÃ© !")
    
    def _run_scheduler(self):
        """ExÃ©cute le planificateur en arriÃ¨re-plan"""
        while self.running:
            schedule.run_pending()
            time.sleep(60)  # VÃ©rifier chaque minute
    
    def run_daily_reminders(self):
        """Lance les rappels quotidiens"""
        print("ğŸ“§ Envoi des rappels quotidiens...")
        asyncio.create_task(send_daily_reminders())
    
    def run_weekly_reports(self):
        """Lance les rapports hebdomadaires"""
        print("ğŸ“Š Envoi des rapports hebdomadaires...")
        asyncio.create_task(send_weekly_reports())
    
    def stop_scheduler(self):
        """ArrÃªte le planificateur"""
        self.running = False
        print("ğŸ“§ Planificateur d'emails arrÃªtÃ©.")

# Instance globale
email_scheduler = EmailScheduler()

# Fonctions pour dÃ©marrer/arrÃªter
def start_email_automation():
    """DÃ©marre l'automatisation des emails"""
    email_scheduler.start_scheduler()

def stop_email_automation():
    """ArrÃªte l'automatisation des emails"""
    email_scheduler.stop_scheduler()
